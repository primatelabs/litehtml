// Copyright (C) 2020-2022 Primate Labs Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of the copyright holder nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#include <fstream>
#include <iostream>

#include "litehtml/css/css_parser.h"

using namespace litehtml;

int main(int argc, char** argv)
{
    // afl-fuzz provides the fuzzed input using stdin.  However, it's more
    // convenient to debug crashes using the fuzzed input files generated by
    // afl-fuzz.  The code below supports loading the input from either stdin
    // or a file (depending on how many arguments were passed to the utility).

    std::string testcase;

    if (argc > 1) {
        std::ifstream ifs(argv[1]);
        testcase = std::string(std::istreambuf_iterator<char>(ifs),
            std::istreambuf_iterator<char>());
    } else {
        testcase = std::string(std::istreambuf_iterator<char>(std::cin),
            std::istreambuf_iterator<char>());
    }

    CSSParser parser(testcase);
    CSSStylesheet* stylesheet = parser.parse_stylesheet();
    delete stylesheet;
    return 0;
}
